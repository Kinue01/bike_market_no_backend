{"ast":null,"code":"import AuthService from '../services/auth.service';\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport const auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login({\n      commit\n    }, user) {\n      return AuthService.login(user).then(user => {\n        commit('loginSucces', user);\n        return Promise.resolve(user);\n      }, error => {\n        commit('loginFailure');\n        return Promise.reject(error);\n      });\n    },\n    logout({\n      commit\n    }) {\n      AuthService.logout();\n      commit('logout');\n    },\n    register({\n      commit\n    }, user) {\n      return AuthService.register(user).then(response => {\n        commit('registerSucces');\n        return Promise.resolve(response.data[0]);\n      }, error => {\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    }\n  },\n  mutations: {\n    loginSucces(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    registerSucces(state) {\n      state.status.loggedIn = false;\n    },\n    registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n  }\n};","map":{"version":3,"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","Promise","resolve","error","reject","logout","register","response","data","mutations","loginSucces","loginFailure","registerSucces","registerFailure"],"sources":["C:/Users/tverd/Рабочий стол/bikeMarket/bike-market/src/store/auth.module.js"],"sourcesContent":["import AuthService from '../services/auth.service';\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\nconst initialState = user\r\n? { status: { loggedIn: true }, user }\r\n: { status: { loggedIn: false }, user: null };\r\n\r\nexport const auth = {\r\n    namespaced: true,\r\n    state: initialState,\r\n    actions: {\r\n        login({commit}, user) {\r\n            return AuthService.login(user)\r\n            .then(user => {\r\n                commit('loginSucces', user);\r\n                return Promise.resolve(user);\r\n            },\r\n            error => {\r\n                commit('loginFailure');\r\n                return Promise.reject(error);\r\n            });\r\n        },\r\n        logout({commit}) {\r\n            AuthService.logout();\r\n            commit('logout');\r\n        },\r\n        register({commit}, user) {\r\n            return AuthService.register(user)\r\n            .then(response => {\r\n                commit('registerSucces');\r\n                return Promise.resolve(response.data[0]);\r\n            },\r\n            error => {\r\n                commit('registerFailure');\r\n                return Promise.reject(error);\r\n            });\r\n        }\r\n    },\r\n    mutations: {\r\n        loginSucces(state, user) {\r\n            state.status.loggedIn = true;\r\n            state.user = user;\r\n        },\r\n        loginFailure(state) {\r\n            state.status.loggedIn = false;\r\n            state.user = null;\r\n        },\r\n        logout(state) {\r\n            state.status.loggedIn = false;\r\n            state.user = null;\r\n        },\r\n        registerSucces(state) {\r\n            state.status.loggedIn = false;\r\n        },\r\n        registerFailure(state) {\r\n            state.status.loggedIn = false;\r\n        }\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,WAAW,MAAM,0BAA0B;AAElD,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrD,MAAMC,YAAY,GAAGL,IAAI,GACvB;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EAAEP;AAAK,CAAC,GACpC;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAM,CAAC;EAAEP,IAAI,EAAE;AAAK,CAAC;AAE7C,OAAO,MAAMQ,IAAI,GAAG;EAChBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAEL,YAAY;EACnBM,OAAO,EAAE;IACLC,KAAKA,CAAC;MAACC;IAAM,CAAC,EAAEb,IAAI,EAAE;MAClB,OAAOD,WAAW,CAACa,KAAK,CAACZ,IAAI,CAAC,CAC7Bc,IAAI,CAACd,IAAI,IAAI;QACVa,MAAM,CAAC,aAAa,EAAEb,IAAI,CAAC;QAC3B,OAAOe,OAAO,CAACC,OAAO,CAAChB,IAAI,CAAC;MAChC,CAAC,EACDiB,KAAK,IAAI;QACLJ,MAAM,CAAC,cAAc,CAAC;QACtB,OAAOE,OAAO,CAACG,MAAM,CAACD,KAAK,CAAC;MAChC,CAAC,CAAC;IACN,CAAC;IACDE,MAAMA,CAAC;MAACN;IAAM,CAAC,EAAE;MACbd,WAAW,CAACoB,MAAM,CAAC,CAAC;MACpBN,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IACDO,QAAQA,CAAC;MAACP;IAAM,CAAC,EAAEb,IAAI,EAAE;MACrB,OAAOD,WAAW,CAACqB,QAAQ,CAACpB,IAAI,CAAC,CAChCc,IAAI,CAACO,QAAQ,IAAI;QACdR,MAAM,CAAC,gBAAgB,CAAC;QACxB,OAAOE,OAAO,CAACC,OAAO,CAACK,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MAC5C,CAAC,EACDL,KAAK,IAAI;QACLJ,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACG,MAAM,CAACD,KAAK,CAAC;MAChC,CAAC,CAAC;IACN;EACJ,CAAC;EACDM,SAAS,EAAE;IACPC,WAAWA,CAACd,KAAK,EAAEV,IAAI,EAAE;MACrBU,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,IAAI;MAC5BG,KAAK,CAACV,IAAI,GAAGA,IAAI;IACrB,CAAC;IACDyB,YAAYA,CAACf,KAAK,EAAE;MAChBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACrB,CAAC;IACDmB,MAAMA,CAACT,KAAK,EAAE;MACVA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACrB,CAAC;IACD0B,cAAcA,CAAChB,KAAK,EAAE;MAClBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IACjC,CAAC;IACDoB,eAAeA,CAACjB,KAAK,EAAE;MACnBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}